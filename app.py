#!/usr/bin/env python3
"""
Sistema de Email Interactivo por Terminal
- Autenticaci√≥n por terminal
- Env√≠o de emails interactivo
- Solo el email del usuario logueado puede enviar
"""

import os
import json
import jwt
import bcrypt
import requests
import getpass
import sys
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from flask_cors import CORS
from functools import wraps
from dotenv import load_dotenv
from supabase import create_client, Client
from email_service import EmailService

# Cargar variables de entorno
load_dotenv()

# Crear app Flask
app = Flask(__name__)
CORS(app)

# Configuraci√≥n
JWT_SECRET = os.getenv('JWT_SECRET', 'mi-clave-secreta-super-segura')
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
FROM_EMAIL = os.getenv('FROM_EMAIL', 'mwainwright@fi.uba.ar')

# Configuraci√≥n de Mailgun
MAILGUN_API_KEY = os.getenv('MAILGUN_API_KEY')
MAILGUN_DOMAIN = os.getenv('MAILGUN_DOMAIN')
MAILGUN_FROM_EMAIL = os.getenv('MAILGUN_FROM_EMAIL')

# Configuraci√≥n de Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("‚ùå SUPABASE_URL y SUPABASE_KEY son requeridas en el archivo .env")

# Crear cliente de Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
print("‚úÖ Conectado a Supabase")

# Configurar servicio de email
email_service = EmailService(
    sendgrid_api_key=SENDGRID_API_KEY,
    mailgun_api_key=MAILGUN_API_KEY,
    mailgun_domain=MAILGUN_DOMAIN
)

# Mostrar proveedores configurados
proveedores = email_service.get_available_providers()
print(f"üìß Proveedores de email configurados: {', '.join(proveedores)}")

# Funciones de base de datos
def buscar_usuario(username):
    """Buscar usuario por username en Supabase"""
    try:
        result = supabase.table('users').select('*').eq('username', username).execute()
        if result.data:
            user = result.data[0]
            return {
                'id': user['id'],
                'username': username,
                'email': user['email'],
                'password': user['password_hash'],
                'fecha_registro': user['created_at'],
                'admin': user.get('admin', False)
            }
        return None
    except Exception as e:
        print(f"‚ùå Error buscando usuario: {e}")
        return None

def crear_usuario(username, email, password_hash, admin=False):
    """Crear usuario en Supabase"""
    try:
        result = supabase.table('users').insert({
            'username': username,
            'email': email,
            'password_hash': password_hash,
            'admin': admin
        }).execute()
        
        if result.data:
            return True, result.data[0]
        return False, "Error al crear usuario"
    except Exception as e:
        print(f"‚ùå Error creando usuario: {e}")
        return False, str(e)

def verificar_usuario_existe(username, email):
    """Verificar si username o email ya existen"""
    try:
        # Verificar username
        result_username = supabase.table('users').select('id').eq('username', username).execute()
        if result_username.data:
            return True, "El nombre de usuario ya existe"
        
        # Verificar email
        result_email = supabase.table('users').select('id').eq('email', email).execute()
        if result_email.data:
            return True, "El email ya existe"
        
        return False, None
    except Exception as e:
        print(f"‚ùå Error verificando usuario: {e}")
        return True, str(e)

def registrar_email_enviado(user_id, username, from_email, to_email, to_name, subject, html_content, provider_usado, estado):
    """Registrar email enviado en la tabla email_logs"""
    try:
        log_data = {
            'user_id': user_id,
            'username': username,
            'from_email': from_email,
            'to_email': to_email,
            'subject': subject,
            'html_content': html_content,
            'provider_usado': provider_usado,
            'estado': estado,  # 'exitoso' o 'fallido'
            'created_at': datetime.utcnow().isoformat()
        }
        
        result = supabase.table('email_logs').insert(log_data).execute()
        
        if result.data:
            return True
        return False
        
    except Exception as e:
        print(f"‚ùå Error registrando email log: {e}")
        return False

def obtener_historial_emails(user_id, limite=10):
    """Obtener historial de emails enviados por el usuario"""
    try:
        result = supabase.table('email_logs').select('*').eq('user_id', user_id).order('created_at', desc=True).limit(limite).execute()
        
        if result.data:
            return result.data
        return []
        
    except Exception as e:
        print(f"‚ùå Error obteniendo historial: {e}")
        return []

def obtener_todos_los_emails(limite=50):
    """Obtener historial de TODOS los emails enviados (solo para admins)"""
    try:
        result = supabase.table('email_logs').select('*').order('created_at', desc=True).limit(limite).execute()
        
        if result.data:
            return result.data
        return []
        
    except Exception as e:
        print(f"‚ùå Error obteniendo historial completo: {e}")
        return []

def contar_emails_enviados_hoy(user_id):
    """Contar emails enviados por el usuario hoy"""
    try:
        # Obtener fecha de hoy en formato ISO
        hoy = datetime.utcnow().date().isoformat()
        
        # Buscar emails enviados hoy
        result = supabase.table('email_logs').select('id').eq('user_id', user_id).gte('created_at', hoy).execute()
        
        return len(result.data) if result.data else 0
        
    except Exception as e:
        print(f"‚ùå Error contando emails de hoy: {e}")
        return 0

def obtener_stats_diarias():
    """Obtener estad√≠sticas de emails enviados hoy por todos los usuarios (solo admins)"""
    try:
        # Obtener fecha de hoy
        hoy = datetime.utcnow().date().isoformat()
        
        # Obtener todos los emails enviados hoy agrupados por usuario
        result = supabase.table('email_logs').select('user_id, username').gte('created_at', hoy).execute()
        
        if not result.data:
            return []
        
        # Contar emails por usuario
        stats_por_usuario = {}
        for email_log in result.data:
            user_id = email_log['user_id']
            username = email_log['username']
            
            if user_id not in stats_por_usuario:
                stats_por_usuario[user_id] = {
                    'user_id': user_id,
                    'username': username,
                    'emails_sent_today': 0
                }
            
            stats_por_usuario[user_id]['emails_sent_today'] += 1
        
        # Convertir a lista y ordenar por cantidad de emails
        stats_list = list(stats_por_usuario.values())
        stats_list.sort(key=lambda x: x['emails_sent_today'], reverse=True)
        
        return stats_list
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return []

def encriptar_password(password):
    """Encriptar contrase√±a"""
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def verificar_password(password, hash_password):
    """Verificar contrase√±a"""
    return bcrypt.checkpw(password.encode('utf-8'), hash_password.encode('utf-8'))

def generar_token(username):
    """Generar token JWT"""
    payload = {
        'username': username,
        'exp': datetime.utcnow() + timedelta(hours=1),  # ‚úÖ PRODUCTION: 1 hora como especifica el challenge
        'iat': datetime.utcnow()  # üìÖ Fecha cuando se cre√≥ el token
    }
    return jwt.encode(payload, JWT_SECRET, algorithm='HS256')

def verificar_token(token):
    """Verificar token JWT"""
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=['HS256'])
        return True, payload['username']
    except jwt.ExpiredSignatureError:
        return False, "Token expirado"
    except jwt.InvalidTokenError:
        return False, "Token inv√°lido"

def verificar_sesion_activa(token):
    """Verificar si la sesi√≥n est√° activa (para modo terminal)"""
    valido, resultado = verificar_token(token)
    if not valido:
        print(f"\n‚ùå SESI√ìN EXPIRADA: {resultado}")
        print("üîÑ Ser√°s redirigido al login...")
        return None
    
    # Obtener datos del usuario desde la base de datos
    usuario = buscar_usuario(resultado)
    if not usuario:
        print("\n‚ùå Error: Usuario no encontrado")
        return None
    
    return usuario

# Decorador para rutas protegidas
def login_requerido(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        
        if not token:
            return jsonify({'error': 'Token requerido'}), 401
        
        if token.startswith('Bearer '):
            token = token[7:]
        
        valido, resultado = verificar_token(token)
        if not valido:
            return jsonify({'error': resultado}), 401
        
        request.usuario_actual = resultado
        return f(*args, **kwargs)
    
    return decorated

# RUTAS

@app.route('/health')
def salud():
    """Verificar que la API funciona"""
    return jsonify({'estado': 'ok', 'mensaje': 'API funcionando correctamente'})

@app.route('/registro', methods=['POST'])
def registro():
    """Registrar nuevo usuario"""
    try:
        datos = request.get_json()
        
        if not datos or not all(k in datos for k in ('username', 'email', 'password')):
            return jsonify({'error': 'username, email y password son requeridos'}), 400
        
        username = datos['username'].strip()
        email = datos['email'].strip()
        password = datos['password']
        admin = datos.get('admin', False)  # Campo opcional, por defecto False
        
        if len(username) < 3:
            return jsonify({'error': 'Username debe tener al menos 3 caracteres'}), 400
        
        if len(password) < 6:
            return jsonify({'error': 'Password debe tener al menos 6 caracteres'}), 400
        
        # Verificar si usuario ya existe
        existe, mensaje = verificar_usuario_existe(username, email)
        if existe:
            return jsonify({'error': mensaje}), 400
        
        # Crear usuario
        password_hash = encriptar_password(password)
        exito, resultado = crear_usuario(username, email, password_hash, admin=admin)
        
        if exito:
            return jsonify({
                'mensaje': 'Usuario registrado exitosamente',
                'usuario': {'username': username, 'email': email, 'admin': admin}
            }), 201
        else:
            return jsonify({'error': f'Error al registrar: {resultado}'}), 500
        
    except Exception as e:
        return jsonify({'error': f'Error en el registro: {str(e)}'}), 500

@app.route('/login', methods=['POST'])
def login():
    """Iniciar sesi√≥n"""
    try:
        datos = request.get_json()
        
        if not datos or not all(k in datos for k in ('username', 'password')):
            return jsonify({'error': 'username y password son requeridos'}), 400
        
        username = datos['username'].strip()
        password = datos['password']
        
        usuario = buscar_usuario(username)
        
        if not usuario:
            return jsonify({'error': 'Usuario o contrase√±a incorrectos'}), 401
        
        if not verificar_password(password, usuario['password']):
            return jsonify({'error': 'Usuario o contrase√±a incorrectos'}), 401
        
        token = generar_token(username)
        
        return jsonify({
            'mensaje': 'Login exitoso',
            'token': token,
            'expira_en': '1 hora'
        })
        
    except Exception as e:
        return jsonify({'error': f'Error en el login: {str(e)}'}), 500

@app.route('/perfil')
@login_requerido
def perfil():
    """Obtener perfil del usuario"""
    try:
        usuario = buscar_usuario(request.usuario_actual)
        
        if not usuario:
            return jsonify({'error': 'Usuario no encontrado'}), 404
        
        return jsonify({
            'usuario': {
                'username': request.usuario_actual,
                'email': usuario['email'],
                'fecha_registro': usuario['fecha_registro'],
                'admin': usuario.get('admin', False)
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'Error al obtener perfil: {str(e)}'}), 500

@app.route('/enviar-email', methods=['POST'])
@login_requerido
def enviar_email():
    """Enviar email con soporte para m√∫ltiples proveedores (requiere autenticaci√≥n)"""
    try:
        # Buscar informaci√≥n del usuario actual
        usuario = buscar_usuario(request.usuario_actual)
        if not usuario:
            return jsonify({'error': 'Usuario no encontrado'}), 404
        
        # Verificar l√≠mite diario (2 emails por d√≠a para testing)
        emails_enviados_hoy = contar_emails_enviados_hoy(usuario['id'])
        if emails_enviados_hoy >= 2:
            return jsonify({
                'error': 'L√≠mite diario alcanzado',
                'mensaje': f'Has enviado {emails_enviados_hoy} emails hoy. L√≠mite m√°ximo: 2 emails por d√≠a.',
                'limite_maximo': 2,
                'emails_enviados_hoy': emails_enviados_hoy
            }), 429  # Too Many Requests
        
        datos = request.get_json()
        
        campos_requeridos = ['to_email', 'to_name', 'subject', 'html_content']
        if not datos or not all(k in datos for k in campos_requeridos):
            return jsonify({'error': f'Campos requeridos: {", ".join(campos_requeridos)}'}), 400
        
        # Obtener par√°metros opcionales
        proveedor = datos.get('provider')  # 'sendgrid', 'mailgun' o None para auto
        usar_fallback = datos.get('use_fallback', True)
        
        # Determinar el email de origen seg√∫n el proveedor
        if proveedor == 'mailgun' and MAILGUN_FROM_EMAIL:
            from_email = MAILGUN_FROM_EMAIL
        else:
            from_email = FROM_EMAIL
        
        # Enviar email usando el servicio
        resultado = email_service.send_email(
            from_email=from_email,
            to_email=datos['to_email'],
            to_name=datos['to_name'],
            subject=datos['subject'],
            html_content=datos['html_content'],
            substitutions=datos.get('substitutions'),
            provider=proveedor,
            use_fallback=usar_fallback
        )
        
        if resultado.get('success'):
            return jsonify({
                'mensaje': 'Email enviado exitosamente',
                'proveedor_usado': resultado.get('provider'),
                'enviado_por': request.usuario_actual,
                'proveedores_disponibles': email_service.get_available_providers()
            })
        else:
            return jsonify({
                'error': 'Error al enviar email',
                'proveedor_intentado': resultado.get('provider'),
                'detalles': resultado.get('error', resultado.get('response_text')),
                'codigo_estado': resultado.get('status_code')
            }), 500
            
    except Exception as e:
        return jsonify({'error': f'Error al enviar email: {str(e)}'}), 500

@app.route('/stats', methods=['GET'])
@login_requerido
def stats():
    """Obtener estad√≠sticas de emails enviados hoy (solo para administradores)"""
    try:
        # Buscar informaci√≥n del usuario actual
        usuario = buscar_usuario(request.usuario_actual)
        if not usuario:
            return jsonify({'error': 'Usuario no encontrado'}), 404
        
        # Verificar si el usuario es administrador
        if not usuario.get('admin', False):
            return jsonify({
                'error': 'Acceso denegado',
                'mensaje': 'Solo los administradores pueden acceder a las estad√≠sticas'
            }), 403  # Forbidden
        
        # Obtener estad√≠sticas de emails enviados hoy
        stats_diarias = obtener_stats_diarias()
        
        # Crear lista simple como pide el challenge: usuario y cantidad de emails
        usuarios_stats = []
        for stat in stats_diarias:
            usuarios_stats.append({
                'username': stat['username'],
                'emails_sent_today': stat['emails_sent_today']
            })
        
        return jsonify(usuarios_stats)
        
    except Exception as e:
        return jsonify({'error': f'Error al obtener estad√≠sticas: {str(e)}'}), 500

# Manejadores de error
@app.errorhandler(404)
def no_encontrado(error):
    return jsonify({'error': 'Endpoint no encontrado'}), 404

@app.errorhandler(405)
def metodo_no_permitido(error):
    return jsonify({'error': 'M√©todo no permitido'}), 405

# ==========================================
# SISTEMA INTERACTIVO POR TERMINAL
# ==========================================

def registro_terminal():
    """Registro de nuevo usuario por terminal"""
    print("\n" + "="*50)
    print("üìù SISTEMA DE EMAIL - REGISTRO DE USUARIO")
    print("="*50)
    
    try:
        # Solicitar datos del usuario
        print("\nüìã Datos del nuevo usuario:")
        
        while True:
            username = input("üë§ Usuario (m√≠n. 3 caracteres): ").strip()
            if len(username) >= 3:
                break
            print("‚ùå El usuario debe tener al menos 3 caracteres")
        
        while True:
            email = input("üìß Email: ").strip()
            if "@" in email and "." in email:
                break
            print("‚ùå Email inv√°lido")
        
        while True:
            password = getpass.getpass("üîí Contrase√±a (m√≠n. 6 caracteres): ")
            if len(password) >= 6:
                break
            print("‚ùå La contrase√±a debe tener al menos 6 caracteres")
        
        password_confirm = getpass.getpass("üîí Confirmar contrase√±a: ")
        
        if password != password_confirm:
            print("‚ùå Las contrase√±as no coinciden")
            return False
        
        # Preguntar si quiere ser admin
        while True:
            admin_input = input("üëë ¬øQuieres ser administrador? (s/n): ").strip().lower()
            if admin_input in ['s', 'si', 's√≠', 'y', 'yes']:
                es_admin = True
                break
            elif admin_input in ['n', 'no']:
                es_admin = False
                break
            else:
                print("‚ùå Responde 's' para s√≠ o 'n' para no")
        
        # Verificar si usuario ya existe
        existe, mensaje = verificar_usuario_existe(username, email)
        if existe:
            print(f"‚ùå {mensaje}")
            return False
        
        # Crear usuario
        print("\nüöÄ Creando usuario...")
        password_hash = encriptar_password(password)
        exito, resultado = crear_usuario(username, email, password_hash, admin=es_admin)
        
        if exito:
            print(f"\n‚úÖ ¬°Usuario {username} registrado exitosamente!")
            print(f"üìß Email: {email}")
            print(f"üëë Admin: {'S√≠' if es_admin else 'No'}")
            print("üîë Ya puedes iniciar sesi√≥n")
            return True
        else:
            print(f"‚ùå Error al registrar: {resultado}")
            return False
            
    except KeyboardInterrupt:
        print("\n\nüëã Registro cancelado")
        return False
    except Exception as e:
        print(f"‚ùå Error en el registro: {e}")
        return False

def menu_inicial():
    """Men√∫ inicial: Login o Registro"""
    while True:
        try:
            print("\n" + "="*50)
            print("üöÄ SISTEMA DE EMAIL - BIENVENIDO")
            print("="*50)
            print("1. üîê Iniciar sesi√≥n")
            print("2. üìù Registrar nuevo usuario")
            print("3. üö™ Salir")
            
            opcion = input("\nüî¢ Selecciona una opci√≥n (1-3): ").strip()
            
            if opcion == "1":
                token = login_terminal()
                if token:
                    return token
            elif opcion == "2":
                registro_terminal()
                print("\n‚úÖ Usuario registrado. Ahora puedes iniciar sesi√≥n.")
            elif opcion == "3":
                print("\nüëã ¬°Hasta luego!")
                sys.exit(0)
            else:
                print("‚ùå Opci√≥n inv√°lida. Usa 1, 2 o 3.")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error: {e}")

def login_terminal():
    """Autenticaci√≥n por terminal"""
    print("\n" + "="*50)
    print("üîê INICIO DE SESI√ìN")
    print("="*50)
    
    # Proceso de login directo
    max_intentos = 3
    for intento in range(max_intentos):
        try:
            print(f"\nüîë Intento {intento + 1} de {max_intentos}")
            username = input("üë§ Usuario: ").strip()
            
            if not username:
                print("‚ùå El usuario no puede estar vac√≠o")
                continue
            
            password = getpass.getpass("üîí Contrase√±a: ")
            
            if not password:
                print("‚ùå La contrase√±a no puede estar vac√≠a")
                continue
            
            # Verificar credenciales
            usuario = buscar_usuario(username)
            
            if not usuario:
                print("‚ùå Usuario o contrase√±a incorrectos")
                continue
            
            if not verificar_password(password, usuario['password']):
                print("‚ùå Usuario o contrase√±a incorrectos")
                continue
            
            # Login exitoso - generar token JWT
            token = generar_token(username)
            print(f"\n‚úÖ ¬°Bienvenido/a {username}!")
            print(f"üìß Email configurado: {usuario['email']}")
            print(f"üîê Sesi√≥n v√°lida por 1 hora")
            return token
            
        except KeyboardInterrupt:
            print("\n\nüëã Proceso cancelado por el usuario")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print(f"\n‚ùå M√°ximo de intentos alcanzado ({max_intentos})")
    return None

def enviar_email_interactivo(usuario_actual):
    """Env√≠o de email interactivo por terminal"""
    try:
        print("\n" + "="*50)
        print("üìß ENVIAR EMAIL")
        print("="*50)
        
        # Verificar l√≠mite diario (2 emails por d√≠a para testing)
        emails_enviados_hoy = contar_emails_enviados_hoy(usuario_actual['id'])
        if emails_enviados_hoy >= 2:
            print(f"\n‚ùå L√çMITE DIARIO ALCANZADO")
            print(f"   Has enviado {emails_enviados_hoy} emails hoy")
            print(f"   L√≠mite m√°ximo: 2 emails por d√≠a")
            print(f"   Intenta ma√±ana cuando se reinicie tu cuota")
            return
        
        print(f"\nüìä Emails enviados hoy: {emails_enviados_hoy}/2")
        
        # Datos del destinatario
        print("\nüìã Datos del destinatario:")
        to_email = input("‚úâÔ∏è  Email destino: ").strip()
        if not to_email:
            print("‚ùå Email destino es requerido")
            return
        
        to_name = input("üë§ Nombre destino: ").strip()
        if not to_name:
            to_name = to_email
        
        # Contenido del email
        print("\nüìù Contenido del email:")
        subject = input("üìå Asunto: ").strip()
        if not subject:
            print("‚ùå Asunto es requerido")
            return
        
        print("üìÑ Contenido HTML (presiona Enter dos veces para terminar):")
        html_lines = []
        while True:
            line = input()
            if line == "" and html_lines and html_lines[-1] == "":
                break
            html_lines.append(line)
        
        html_content = "\n".join(html_lines).strip()
        if not html_content:
            html_content = f"<p>{subject}</p>"
        
        # Selecci√≥n de proveedor
        print(f"\nüì° Proveedores disponibles: {', '.join(email_service.get_available_providers())}")
        proveedor = input("üîß Proveedor (presiona Enter para autom√°tico): ").strip().lower()
        if proveedor and proveedor not in email_service.get_available_providers():
            proveedor = None
        
        # Usar el email del usuario como remitente
        from_email = usuario_actual['email']
        
        print(f"\nüöÄ Enviando email...")
        print(f"   De: {from_email}")
        print(f"   Para: {to_email} ({to_name})")
        print(f"   Asunto: {subject}")
        print(f"   Proveedor: {'Autom√°tico' if not proveedor else proveedor}")
        
        # Enviar email
        resultado = email_service.send_email(
            from_email=from_email,
            to_email=to_email,
            to_name=to_name,
            subject=subject,
            html_content=html_content,
            provider=proveedor if proveedor else None,
            use_fallback=True
        )
        
        # Registrar el env√≠o en la base de datos
        estado = 'exitoso' if resultado.get('success') else 'fallido'
        provider_usado = resultado.get('provider', 'desconocido')
        
        log_registrado = registrar_email_enviado(
            user_id=usuario_actual['id'],
            username=usuario_actual['username'],
            from_email=from_email,
            to_email=to_email,
            to_name=to_name,
            subject=subject,
            html_content=html_content,
            provider_usado=provider_usado,
            estado=estado
        )
        
        if resultado.get('success'):
            print(f"\n‚úÖ ¬°Email enviado exitosamente!")
            print(f"üì° Proveedor usado: {resultado.get('provider')}")
            if log_registrado:
                print("üìù Env√≠o registrado en el historial")
            else:
                print("‚ö†Ô∏è  Email enviado pero no se pudo registrar en la base de datos")
        else:
            print(f"\n‚ùå Error al enviar email:")
            print(f"   Proveedor: {resultado.get('provider')}")
            print(f"   Error: {resultado.get('error', resultado.get('response_text'))}")
            if log_registrado:
                print("üìù Error registrado en el historial")
            else:
                print("‚ö†Ô∏è  No se pudo registrar el error en la base de datos")
            
    except KeyboardInterrupt:
        print("\n\nüìß Env√≠o cancelado")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

def mostrar_perfil(usuario_actual):
    """Mostrar perfil del usuario"""
    print("\n" + "="*50)
    print("üë§ PERFIL DE USUARIO")
    print("="*50)
    
    # Buscar datos actualizados del usuario
    usuario_db = buscar_usuario(usuario_actual.get('username', ''))
    if usuario_db:
        print(f"üë§ Usuario: {usuario_db.get('username', usuario_actual.get('username', 'N/A'))}")
        print(f"üìß Email: {usuario_db['email']}")
        print(f"üìÖ Registrado: {usuario_db.get('fecha_registro', 'N/A')}")
        print(f"üëë Admin: {'S√≠' if usuario_db.get('admin', False) else 'No'}")
    else:
        print(f"üë§ Usuario: {usuario_actual.get('username', 'N/A')}")
        print(f"üìß Email: {usuario_actual['email']}")
        print(f"üìÖ Registrado: {usuario_actual.get('fecha_registro', 'N/A')}")
        print(f"üëë Admin: {'S√≠' if usuario_actual.get('admin', False) else 'No'}")
    
    print(f"üîß Proveedores: {', '.join(email_service.get_available_providers())}")

def mostrar_historial_emails(usuario_actual):
    """Mostrar historial de emails enviados"""
    print("\n" + "="*50)
    
    # Verificar si es admin para mostrar estad√≠sticas o historial detallado
    es_admin = usuario_actual.get('admin', False)
    
    if es_admin:
        print("ÔøΩ ESTAD√çSTICAS DE EMAILS (ADMIN)")
        print("="*50)
        print("üëë Modo Administrador: Emails enviados por usuario")
        
        try:
            # Obtener estad√≠sticas de emails enviados hoy
            stats_diarias = obtener_stats_diarias()
            
            if not stats_diarias:
                print("\nüì≠ No hay emails enviados hoy")
                return
            
            print(f"\nüìà Usuarios que enviaron emails hoy:")
            print("-" * 40)
            
            for i, stat in enumerate(stats_diarias, 1):
                print(f"{i}. üë§ Usuario: {stat['username']} - üìß Emails: {stat['emails_sent_today']}")
                
        except Exception as e:
            print(f"‚ùå Error al obtener estad√≠sticas: {e}")
    else:
        print("ÔøΩ HISTORIAL DE EMAILS ENVIADOS")
        print("="*50)
        
        try:
            # Para usuarios normales, mostrar su historial detallado
            historial = obtener_historial_emails(usuario_actual['id'], limite=20)
            
            if not historial:
                print("\nÔøΩ No hay emails en tu historial")
                return
            
            print(f"\nüìä √öltimos {len(historial)} emails enviados:")
            print("-" * 80)
            
            for i, email in enumerate(historial, 1):
                # Formatear fecha
                try:
                    fecha_str = email['created_at']
                    if 'T' in fecha_str:
                        fecha_formateada = fecha_str.split('T')[0] + ' ' + fecha_str.split('T')[1][:8]
                    else:
                        fecha_formateada = fecha_str
                except:
                    fecha_formateada = email.get('created_at', 'N/A')
                
                # Estado con emoji
                estado_emoji = "‚úÖ" if email['estado'] == 'exitoso' else "‚ùå"
                
                print(f"\n{i}. {estado_emoji} {email['estado'].upper()}")
                print(f"   üìÖ Fecha: {fecha_formateada}")
                print(f"   üìß Para: {email['to_email']}")
                print(f"   üìå Asunto: {email['subject']}")
                print(f"   üîß Proveedor: {email['provider_usado']}")
                
                # Mostrar contenido (truncado)
                content = email.get('html_content', '')
                if len(content) > 100:
                    content = content[:100] + "..."
                print(f"   üìÑ Contenido: {content}")
                
        except Exception as e:
            print(f"‚ùå Error al obtener historial: {e}")
    
    print("\n" + "="*50)

def menu_principal(token_jwt):
    """Men√∫ principal interactivo con verificaci√≥n JWT"""
    while True:
        try:
            # Verificar token en cada iteraci√≥n del men√∫
            usuario_actual = verificar_sesion_activa(token_jwt)
            if not usuario_actual:
                # Token expirado - volver al login
                print("\nüîÑ Redirigiendo al men√∫ de login...")
                return
            
            print("\n" + "="*50)
            print("SISTEMA DE EMAIL - MEN√ö PRINCIPAL")
            print("="*50)
            print("1. Enviar email")
            print("2. Ver perfil")
            print("3. Ver estad√≠sticas de emails (ADMIN)")
            print("4. Salir")
            opcion = input("\nüî¢ Selecciona una opci√≥n (1-4): ").strip()
            
            if opcion == "1":
                enviar_email_interactivo(usuario_actual)
            elif opcion == "2":
                mostrar_perfil(usuario_actual)
            elif opcion == "3":
                # Verificar si es admin antes de mostrar estad√≠sticas
                if usuario_actual.get('admin', False):
                    mostrar_historial_emails(usuario_actual)
                else:
                    print("\n" + "="*50)
                    print("‚ùå ERROR 403 - ACCESO DENEGADO")
                    print("="*50)
                    print("üö´ Solo los administradores pueden acceder a las estad√≠sticas")
                    print("üí° Contacta a un administrador si necesitas esta informaci√≥n")
                    print("="*50)
            elif opcion == "4":
                print("\nüëã ¬°Hasta luego!")
                sys.exit(0)
            else:
                print("‚ùå Opci√≥n inv√°lida. Usa 1, 2, 3 o 4.")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error: {e}")

def modo_interactivo():
    """Modo interactivo principal con verificaci√≥n JWT"""
    print("üöÄ INICIANDO MODO INTERACTIVO")
    print("Conectando a servicios...")
    
    # Loop principal - manejar expiraci√≥n de token
    while True:
        try:
            # Men√∫ inicial (Login o Registro)
            token_jwt = menu_inicial()
            
            # Men√∫ principal (se sale si el token expira)
            menu_principal(token_jwt)
            
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error: {e}")
            print("üîÑ Reiniciando sistema...")

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--api':
        # Modo API
        print("Iniciando API de Email")
        print("Endpoints disponibles:")
        print("   POST /registro - Registrar usuario")
        print("   POST /login - Iniciar sesi√≥n")
        print("   GET  /perfil - Ver perfil (requiere token)")
        print("   POST /enviar-email - Enviar email (requiere token, l√≠mite 2/d√≠a)")
        print("   GET  /stats - Estad√≠sticas diarias (solo admins)")
        print("   GET  /health - Verificar API")
        print(f"üåê Servidor corriendo en: http://localhost:5000")
        
        app.run(debug=True, port=5000)
    else:
        # Modo interactivo (por defecto)
        modo_interactivo()